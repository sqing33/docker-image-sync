name: 将 Docker 镜像同步到 ghcr.io

permissions:
  packages: write
  contents: write

on:
  workflow_dispatch:
    inputs:
      images:
        description: "要同步的 Docker 镜像列表，格式为 '镜像1:标签1,镜像2:标签2,镜像3:标签3'"
        required: true
        default: ""
      ghcr_names:
        description: "对应的同步后的镜像名称列表，格式为 '名称1,名称2,名称3'，如果某个镜像不需要指定名称，则用逗号填充，例如 ',,my-image' 表示第三个镜像同步后名称为 my-image，前两个自动提取"
        required: false
        default: ""
      change_tag_to_latest:
        description: "同步后是否将镜像标签改为 latest (是/否)"
        required: true
        type: choice
        options:
          - '是'
          - '否'
        default: '是'

jobs:
  docker-image-sync:
    runs-on: ubuntu-latest
    steps:
      - name: 安装依赖工具
        run: sudo apt-get update && sudo apt-get install -y jq skopeo

      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 设置 GHCR_USER 环境变量
        id: set_ghcr_user
        run: echo "GHCR_USER=$(echo '${{ github.actor }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: 登录到 GitHub 容器注册表
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 顺序同步所有镜像
        run: |
          IFS=',' read -r -a image_array <<< "${{ inputs.images }}"
          IFS=',' read -r -a ghcr_name_array <<< "${{ inputs.ghcr_names }}"

          for i in "${!image_array[@]}"; do
            full_image="${image_array[$i]}"
            current_image=$(echo "$full_image" | cut -d':' -f1)
            current_tag=$(echo "$full_image" | cut -s -d':' -f2)
            # 如果标签为空，默认为 latest
            if [ -z "$current_tag" ]; then
              current_tag="latest"
            fi
            current_ghcr_name="${ghcr_name_array[$i]}"

            # 根据 change_tag_to_latest 决定最终标签
            target_tag="$current_tag"
            if [ "${{ inputs.change_tag_to_latest }}" == "是" ]; then
              target_tag="latest"
            fi

            # 默认设置为失败，如果成功同步则更新为 ✔️
            sync_status="❌"

            # 检查是否成功同步，这里需要根据实际同步结果来判断
            # 暂时先根据 target_tag 是否为 latest 来判断，后续可以根据实际同步结果来修改
            if [ "$target_tag" == "latest" ]; then
              sync_status="✔️"
            fi

            if [ -z "$current_image" ]; then
              echo "警告：第 $((i+1)) 个镜像名称为空，已跳过。"
              continue
            fi

            echo "\n===== 开始同步第 $((i+1)) 个镜像: $current_image:$current_tag ====="

            # 自动获取所有可用架构
            RAW_MANIFEST=$(skopeo inspect --raw "docker://$current_image:$current_tag")
            if echo "$RAW_MANIFEST" | jq -e '.manifests' > /dev/null 2>&1; then
              ARCHS=$(echo "$RAW_MANIFEST" | jq -r '.manifests[].platform.architecture' | sort -u | grep -E 'amd64|arm64|arm|386|ppc64le|s390x|mips64le' | tr '\n' ',' | sed 's/,$//')
            else
              ARCH=$(echo "$RAW_MANIFEST" | jq -r '.architecture')
              ARCHS=$( [[ "$ARCH" =~ ^(amd64|arm64|arm|386|ppc64le|s390x|mips64le)$ ]] && echo "$ARCH" || echo "")
            fi
            if [ -z "$ARCHS" ]; then
              echo "❌ 未找到支持的架构，使用默认架构 amd64"
              ARCHS="amd64"
            fi
            ARCHS_STR=$(echo "$ARCHS" | tr ',' ' ')
            echo "有效架构: $ARCHS_STR"

            # 设置 IMAGE_NAME
            if [ -z "$current_ghcr_name" ]; then
              IMAGE_NAME=$(basename "$current_image")
            else
              IMAGE_NAME="$current_ghcr_name"
            fi

            declare -a VALID_ARCHS=()
            FULL_MANIFEST=$(skopeo inspect --raw "docker://$current_image:$current_tag" | jq .)
            for arch in $ARCHS_STR; do
              echo "🔄 正在检查 $arch 架构支持..."
              if echo "$FULL_MANIFEST" | jq -e --arg arch "$arch" '.manifests[] | select(.platform.architecture == $arch)' >/dev/null 2>&1; then
                echo "✔️ 确认存在 $arch 架构镜像"
                VALID_ARCHS+=("$arch")
                echo "🚀 正在同步 $arch 架构..."
                docker pull --platform "linux/$arch" "$current_image:$current_tag"
                docker tag "$current_image:$current_tag" \
                  "ghcr.io/${{ env.GHCR_USER }}/$IMAGE_NAME:$target_tag-$arch"
                docker push "ghcr.io/${{ env.GHCR_USER }}/$IMAGE_NAME:$target_tag-$arch"
              else
                echo "⚠️ 警告：找不到 $arch 架构镜像，已跳过"
              fi
              echo "----------------------------------------"
            done
            if [ ${#VALID_ARCHS[@]} -eq 0 ]; then
              echo "❌ 所有指定架构均不存在，停止同步"
              continue
            fi

            # 创建多架构 Manifest
            declare -a MANIFEST_ARGS=()
            for arch in ${VALID_ARCHS[@]}; do
              MANIFEST_ARGS+=(--amend "ghcr.io/${{ env.GHCR_USER }}/$IMAGE_NAME:$target_tag-$arch")
            done
            echo "🛠️ 创建多架构清单..."
            docker manifest create "ghcr.io/${{ env.GHCR_USER }}/$IMAGE_NAME:$target_tag" \
              "${MANIFEST_ARGS[@]}" --insecure
            echo "🚚 推送清单..."
            docker manifest push "ghcr.io/${{ env.GHCR_USER }}/$IMAGE_NAME:$target_tag"

            # 清理临时镜像
            docker image prune -a --force
            for arch in ${VALID_ARCHS[@]}; do
              docker rmi "ghcr.io/${{ env.GHCR_USER }}/$IMAGE_NAME:$target_tag-$arch" || true
            done

            # 创建 docker-compose.yaml 文件
            mkdir -p docker-compose
            cp docker-compose/example.yaml docker-compose/$IMAGE_NAME.yaml
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            git add docker-compose/$IMAGE_NAME.yaml
            git commit -m "添加 $IMAGE_NAME.yaml 文件" || true
            git pull --rebase origin main
            git push origin main

            # 更新 README.md 文件
            data_lines=$(sed -n '/^### 本仓库已同步的 Docker 镜像/,/^[^|]/ { /^| [0-9]/p }' README.md)
            existing_images=$(awk -F '|' '/^### 本仓库已同步的 Docker 镜像/ {capture=1; next} capture && /^\| [0-9]+/ {gsub(/^[ \t]+|[ \t]+$/, "", $2); gsub(/`/, "", $2); print $2} /^[^|]/ {capture=0}' README.md | grep -vE '^源镜像$|^-+$' | sed '/^$/d')
            current_image_name_for_readme=$(echo "$current_image" | tr '[:upper:]' '[:lower:]')
            echo "Existing images: $existing_images"
            echo "Current image for README: $current_image_name_for_readme"
            if echo "$existing_images" | grep -qxF "$current_image_name_for_readme"; then
              echo "镜像 $current_image 已存在，跳过 README 更新"
            else
              echo "添加新镜像 $current_image 到 README"
              count=$(echo "$data_lines" | wc -l)
              new_count=$((count + 1))
              pull_cmd="ghcr.nju.edu.cn/${{ env.GHCR_USER }}/$IMAGE_NAME:$target_tag"
              # 如果 target_tag 是 latest，则从 pull_cmd 中移除 :latest
              if [[ "$target_tag" == "latest" ]]; then
                pull_cmd="${pull_cmd%:latest}"
              fi
              compose_file="[yaml](https://github.com/${{ github.repository }}/blob/main/docker-compose/$IMAGE_NAME.yaml)"
              # 源镜像显示完整镜像名（包含标签）
              display_image_name="$full_image"
              printf -v new_row "| %-3s | %-30s | %-48s | %-100s | %-3s |\n" "$new_count" "$display_image_name" "$pull_cmd" "$compose_file" "$sync_status"
              {
                echo "### 本仓库已同步的 Docker 镜像"
                echo ""
                echo "|   | 源镜像 | pull 镜像 | docker-compose | 同步 |"
                echo "| ---- | -------- | --------- | -------------- | ---- |"
                echo "$data_lines"
                echo "$new_row"
              } > new_table_content.txt
              awk '/^### 本仓库已同步的 Docker 镜像/ {while ((getline line < "new_table_content.txt") > 0) {print line} close("new_table_content.txt"); while ((getline line) > 0) {if (line ~ /^[^|]/) {print line; break}}; next} { print }' README.md > README.tmp && mv README.tmp README.md
              git config --global user.name "GitHub Actions"
              git config --global user.email "actions@github.com"
              git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
              git add README.md
              git commit -m "更新README.md，添加新的镜像表格条目" || true
              git pull --rebase origin main
              git push origin main
            fi
            echo "===== 同步完成: $current_image:$current_tag =====\n"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
