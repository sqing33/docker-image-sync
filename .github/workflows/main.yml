name: 将 Docker 镜像同步到 ghcr.io

permissions:
  packages: write
  contents: write

on:
  workflow_dispatch:
    inputs:
      images:
        description: "要同步的 Docker 镜像列表，格式为 '镜像1:标签1,镜像2:标签2,镜像3:标签3'"
        required: true
        default: ""
      ghcr_names:
        description: "对应的同步后的镜像名称列表，格式为 '名称1,名称2,名称3'，如果某个镜像不需要指定名称，则用逗号填充，例如 ',,my-image' 表示第三个镜像同步后名称为 my-image，前两个自动提取"
        required: false
        default: ""
      change_tag_to_latest:
        description: "同步后是否将镜像标签改为 latest (是/否)"
        required: true
        type: choice
        options:
          - "是"
          - "否"
        default: "是"

jobs:
  docker-image-sync:
    runs-on: ubuntu-latest
    steps:
      - name: 安装依赖工具
        run: sudo apt-get update && sudo apt-get install -y jq skopeo

      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 设置 GHCR_USER 环境变量
        id: set_ghcr_user
        run: echo "GHCR_USER=$(echo '${{ github.actor }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: 登录到 GitHub 容器注册表
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 顺序同步所有镜像
        run: |
          IFS=',' read -r -a image_array <<< "${{ inputs.images }}"
          IFS=',' read -r -a ghcr_name_array <<< "${{ inputs.ghcr_names }}"

          for i in "${!image_array[@]}"; do
            full_image_raw="${image_array[$i]}"
            full_image_cleaned=$(echo "$full_image_raw" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

            if [ -z "$full_image_cleaned" ]; then
              echo "警告：第 $((i+1)) 个原始镜像条目 '${full_image_raw}' 在清理前后空格后为空，已跳过。"
              continue
            fi

            current_image_from_input=$(echo "$full_image_cleaned" | cut -d':' -f1)
            current_tag_from_input=$(echo "$full_image_cleaned" | cut -s -d':' -f2)

            if [ -z "$current_image_from_input" ]; then
              echo "警告：第 $((i+1)) 个镜像 '${full_image_cleaned}' 名称部分为空，已跳过。"
              continue
            fi

            # effective_input_tag 是用户输入或默认的标签，用于查重和决定 README 中源镜像的显示格式
            effective_input_tag="$current_tag_from_input"
            if [ -z "$effective_input_tag" ]; then
              effective_input_tag="latest"
            fi
            
            # full_image_for_sync 是实际用于 skopeo 和 docker pull 的完整镜像名:标签
            # 如果用户输入的是 "image" (没有标签)，同步时也按 "image:latest" 处理
            full_image_for_sync="$current_image_from_input:$effective_input_tag"

            # key_for_readme_check 是用于和 README 中现有条目比较的键
            # 如果标签是 latest, 则键不包含 :latest
            key_for_readme_check="$current_image_from_input"
            if [ "$effective_input_tag" != "latest" ]; then
              key_for_readme_check="$current_image_from_input:$effective_input_tag"
            fi

            current_ghcr_name="${ghcr_name_array[$i]}"

            # target_tag 是最终推送到 ghcr.io 的标签
            target_tag="$effective_input_tag" # 默认使用解析出的标签
            if [[ "$effective_input_tag" =~ "alpine" ]]; then # 如果输入标签含 alpine
               target_tag="alpine" # 目标标签固定为 alpine
            elif [ "${{ inputs.change_tag_to_latest }}" == "是" ]; then # 如果配置了强制 latest
               target_tag="latest"
            fi
            # 如果输入本身就是 latest，且没有被 alpine 规则覆盖，change_tag_to_latest 是 "否"，则 target_tag 仍为 latest

            sync_status="❌" # 默认为不同步
            # 如果原始标签就是 latest，或者目标标签是 alpine (通常这类是明确版本)，则认为是有效同步
            if [ "$effective_input_tag" == "latest" ] || [[ "$target_tag" == "alpine" ]]; then
               sync_status="✔️"
            # 如果不是 alpine，但被强制改为 latest，也视为有效（因为用户选择了 change_tag_to_latest）
            elif [ "${{ inputs.change_tag_to_latest }}" == "是" ] && [ "$target_tag" == "latest" ]; then
               sync_status="✔️"
            fi


            echo "\n===== 开始同步第 $((i+1)) 个镜像: $full_image_for_sync (原始输入: '$full_image_raw', 用于查重键: '$key_for_readme_check', 目标GHCR标签: '$target_tag') ====="

            # 自动获取所有可用架构 (使用 full_image_for_sync)
            RAW_MANIFEST=$(skopeo inspect --raw "docker://$full_image_for_sync")
            if echo "$RAW_MANIFEST" | jq -e '.manifests' > /dev/null 2>&1; then
              ARCHS=$(echo "$RAW_MANIFEST" | jq -r '.manifests[].platform.architecture' | sort -u | grep -E 'amd64|arm64|arm|386|ppc64le|s390x|mips64le' | tr '\n' ',' | sed 's/,$//')
            else
              ARCH=$(echo "$RAW_MANIFEST" | jq -r '.architecture')
              ARCHS=$( [[ "$ARCH" =~ ^(amd64|arm64|arm|386|ppc64le|s390x|mips64le)$ ]] && echo "$ARCH" || echo "")
            fi
            if [ -z "$ARCHS" ]; then
              echo "❌ 未找到支持的架构，使用默认架构 amd64"
              ARCHS="amd64"
            fi
            ARCHS_STR=$(echo "$ARCHS" | tr ',' ' ')
            echo "有效架构: $ARCHS_STR"

            # 设置 IMAGE_NAME (ghcr 上的镜像名)
            if [ -z "$current_ghcr_name" ]; then
              IMAGE_NAME=$(basename "$current_image_from_input")
            else
              IMAGE_NAME="$current_ghcr_name"
            fi

            declare -a VALID_ARCHS=()
            FULL_MANIFEST=$(skopeo inspect --raw "docker://$full_image_for_sync" | jq .)
            for arch in $ARCHS_STR; do
              echo "🔄 正在检查 $arch 架构支持..."
              if echo "$FULL_MANIFEST" | jq -e --arg arch "$arch" '.manifests[] | select(.platform.architecture == $arch)' >/dev/null 2>&1; then
                echo "✔️ 确认存在 $arch 架构镜像"
                VALID_ARCHS+=("$arch")
                echo "🚀 正在同步 $arch 架构..."
                echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
                docker pull --platform "linux/$arch" "$full_image_for_sync"
                docker tag "$full_image_for_sync" \
                  "ghcr.io/${GHCR_USER}/$IMAGE_NAME:$target_tag-$arch" # 使用 target_tag
                docker push "ghcr.io/${GHCR_USER}/$IMAGE_NAME:$target_tag-$arch"
              else
                echo "⚠️ 警告：找不到 $arch 架构镜像，已跳过"
              fi
              echo "----------------------------------------"
            done
            if [ ${#VALID_ARCHS[@]} -eq 0 ]; then
              echo "❌ 所有指定架构均不存在，停止同步"
              continue
            fi

            # 创建多架构 Manifest (使用 target_tag)
            declare -a MANIFEST_ARGS=()
            for arch in ${VALID_ARCHS[@]}; do
              MANIFEST_ARGS+=(--amend "ghcr.io/${{ env.GHCR_USER }}/$IMAGE_NAME:$target_tag-$arch")
            done
            echo "🛠️ 创建多架构清单..."
            docker manifest create "ghcr.io/${{ env.GHCR_USER }}/$IMAGE_NAME:$target_tag" \
              "${MANIFEST_ARGS[@]}" --insecure
            echo "🚚 推送清单..."
            docker manifest push "ghcr.io/${{ env.GHCR_USER }}/$IMAGE_NAME:$target_tag"

            # 清理临时镜像
            for arch in ${VALID_ARCHS[@]}; do
              docker rmi "ghcr.io/${{ env.GHCR_USER }}/$IMAGE_NAME:$target_tag-$arch" || true
              # 也尝试清理原始拉取的带平台后缀的镜像（docker pull有时会这样命名）
              docker rmi "$full_image_for_sync" || true 
            done

            # 创建 docker-compose.yaml 文件
            mkdir -p docker-compose
            # 使用 IMAGE_NAME (即 ghcr 上的镜像名) 来命名 compose 文件
            compose_file_name="$IMAGE_NAME" 
            cp docker-compose/example.yaml "docker-compose/$compose_file_name.yaml"
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            git add "docker-compose/$compose_file_name.yaml"
            git commit -m "添加 $compose_file_name.yaml 文件" || true
            git pull --rebase origin main
            git push origin main

            # 更新 README.md 文件
            # 获取已存在的源镜像键（第二列，如果标签是latest则省略）
            temp_readme_keys_file=$(mktemp)
            awk -F '|' '
                /^### 本仓库已同步的 Docker 镜像/ {capture=1; next}
                capture && /^\| *[0-9]+ *\|/ {
                    if (match($0, /^\|[^|]*\|([^|]*)\|/, col_array)) {
                        source_img_raw = col_array[1];
                        gsub(/^[[:space:]]+|[[:space:]]+$/, "", source_img_raw);
                        if (source_img_raw != "") {
                            # 分离名称和标签
                            img_name_part = source_img_raw;
                            img_tag_part = "";
                            if (index(source_img_raw, ":")) {
                                img_name_part = substr(source_img_raw, 1, index(source_img_raw, ":") - 1);
                                img_tag_part = substr(source_img_raw, index(source_img_raw, ":") + 1);
                            }
                            
                            if (img_tag_part == "latest" || img_tag_part == "") {
                                print img_name_part; # 如果标签是latest或空，只打印名称部分
                            } else {
                                print source_img_raw; # 否则打印原始的 名称:标签
                            }
                        }
                    }
                }
                /^[^|]/ && capture {capture=0}
            ' README.md > "$temp_readme_keys_file"

            existing_sources_keys=$(<"$temp_readme_keys_file")
            rm "$temp_readme_keys_file"

            already_exists=false
            # 使用 grep -Fx 进行精确的整行匹配
            if echo "${existing_sources_keys}" | grep -qFx "$key_for_readme_check"; then
              already_exists=true
            fi

            if $already_exists; then
              echo "镜像 '$key_for_readme_check' 已存在于 README 表格，跳过添加。"
            else
              echo "添加新镜像 '$key_for_readme_check' 到 README"
              
              data_lines=$(sed -n '/^### 本仓库已同步的 Docker 镜像/,/^[^|]/ { /^\| [0-9]/p }' README.md)
              count=0
              if [ -n "$data_lines" ]; then
                count=$(echo "$data_lines" | wc -l)
              fi
              new_count=$((count + 1))

              # display_image_name 在 README 中显示的源镜像名称
              # 如果 effective_input_tag 是 latest, 则只显示 current_image_from_input
              display_image_name_for_readme="$current_image_from_input"
              if [ "$effective_input_tag" != "latest" ]; then
                display_image_name_for_readme="$current_image_from_input:$effective_input_tag"
              fi
              
              # pull_cmd_val 是 ghcr 的 pull 命令，如果 target_tag 是 latest 则省略
              pull_cmd_val="ghcr.nju.edu.cn/${{ env.GHCR_USER }}/$IMAGE_NAME" # IMAGE_NAME 是 ghcr 上的名称
              if [ "$target_tag" != "latest" ]; then
                pull_cmd_val="$pull_cmd_val:$target_tag"
              fi
              pull_cmd_markdown="\`$pull_cmd_val\`"

              compose_file_markdown="[yaml](https://github.com/${{ github.repository }}/blob/main/docker-compose/$compose_file_name.yaml)"
              
              printf -v new_row "| %-3s | %-30s | %-48s | %-100s | %-3s |\n" "$new_count" "$display_image_name_for_readme" "$pull_cmd_markdown" "$compose_file_markdown" "$sync_status"
              
              {
                echo "### 本仓库已同步的 Docker 镜像"
                echo ""
                echo "|   | 源镜像 | pull 镜像 | docker-compose | 同步 |"
                echo "| ---- | -------- | --------- | -------------- | ---- |"
                if [ -n "$data_lines" ]; then
                    echo "$data_lines"
                fi
                echo -n "$new_row" 
              } > new_table_content.txt

              awk '
                /^### 本仓库已同步的 Docker 镜像/ {
                  while ((getline line < "new_table_content.txt") > 0) { print line }
                  close("new_table_content.txt")
                  while ((getline) > 0) {
                    if (line !~ /^\|/ && line !~ /^### 本仓库已同步的 Docker 镜像/) { print line; break }
                  }
                  next
                }
                { print }
              ' README.md > README.tmp && mv README.tmp README.md
              
              git config --global user.name "GitHub Actions"
              git config --global user.email "actions@github.com"
              git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
              git add README.md
              git commit -m "更新README.md，添加新的镜像表格条目: $display_image_name_for_readme" || true
              git pull --rebase origin main
              git push origin main
            fi
            echo "===== 同步完成: $full_image_for_sync (推送到 ghcr.io/${{ env.GHCR_USER }}/$IMAGE_NAME:$target_tag) =====\n"
          done
          docker image prune -a --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
