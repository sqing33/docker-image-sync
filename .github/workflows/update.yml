name: 定期更新 ghcr.io 镜像

on:
  schedule:
    - cron: "0 16 * * *"
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 安装依赖
        run: sudo apt-get install -y jq skopeo

      - name: 提取目标镜像名称（从 pull 命令列）
        id: extract-target-images
        run: |
          awk -F '|' '
          /^### 本仓库已同步的 Docker 镜像/ {capture=1; next}
          capture && /^\| [0-9]+/ {
              # 提取 pull 镜像列（第3列）
              gsub(/^[ \t]+|[ \t]+$/, "", $4);
              gsub(/`/, "", $4);
              print $4
          }
          /^### 部分镜像 docker run 命令/ {capture=0}
          ' README.md | grep -vE '^源镜像$|^-+$' | sed '/^$/d' |
          # 提取镜像名称（去除域名和标签）
          sed 's|^ghcr.nju.edu.cn/sqing33/||' |
          sed 's/:[^:]*$//' > target-image-list.txt
          echo "===== target-image-list.txt 内容 ====="
          cat target-image-list.txt

      - name: 提取源镜像名称（从源镜像列）
        id: extract-source-images
        run: |
          awk -F '|' '
          /^### 本仓库已同步的 Docker 镜像/ {capture=1; next}
          capture && /^\| [0-9]+/ {
              # 提取源镜像列（第2列，在删除用途列后）
              gsub(/^[ \t]+|[ \t]+$/, "", $3);
              gsub(/`/, "", $3);
              print $3
          }
          /^### 部分镜像 docker run 命令/ {capture=0}
          ' README.md | grep -vE '^源镜像$|^-+$' | sed '/^$/d' > source-image-list.txt
          echo "===== source-image-list.txt 内容 ====="
          cat source-image-list.txt

      - name: 合并镜像列表
        run: |
          # 检查文件是否存在且非空
          if [ ! -s source-image-list.txt ] || [ ! -s target-image-list.txt ]; then
            echo "错误：source-image-list.txt 或 target-image-list.txt 为空或不存在"
            exit 1
          fi
          paste -d '|' source-image-list.txt target-image-list.txt > combined-list.txt
          echo "===== combined-list.txt 内容 ====="
          cat combined-list.txt

      - name: 登录到 GitHub 容器注册表
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 清理已删除的镜像条目
        env:
          GHCR_USER: ${{ github.repository_owner }}
        run: |
          touch keep-images.txt
          while IFS= read -r target_image; do
            target_image_base="ghcr.io/$(echo "$GHCR_USER" | tr 'A-Z' 'a-z')/$target_image"
            if skopeo inspect "docker://$target_image_base:latest" >/dev/null 2>&1; then
              echo "$target_image" >> keep-images.txt
            else
              echo "镜像 $target_image 不存在于ghcr.io，标记为删除"
              echo "$target_image" >> deleted-images.txt
            fi
          done < target-image-list.txt

          mv keep-images.txt target-image-list.txt

          if [ -f deleted-images.txt ]; then
            echo "开始清理README中的无效条目..."
            while IFS= read -r del_image; do
              escaped_del_image=$(printf '%s' "$del_image" | sed 's/[][\\\^\$\.\*?+(){}|]/\\&/g')
              sed -i "/|.*\`ghcr.nju.edu.cn\/$GHCR_USER\/$escaped_del_image\(:[^\`]*\)\?\`/d" README.md
            done < deleted-images.txt

            awk -F '|' '
              BEGIN { count=0 }
              /^### 本仓库已同步的 Docker 镜像/ {
                print
                count=0
                next
              }
              /^\| *----/ { print; next }
              /^\| *[0-9]+/ {
                count++
                spaces_before = match($2, /^ */) ? substr($2, 1, RLENGTH) : ""
                spaces_after = match($2, / *$/) ? substr($2, RSTART) : ""
                $2 = sprintf("%s%d%s", spaces_before, count, spaces_after)
                printf "|%s", $2
                for (i=3; i<=NF; i++) printf "|%s", $i
                print ""
                next
              }
              { print }
            ' README.md > README.tmp && mv README.tmp README.md

            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
            git add README.md
            git commit -m "自动清理已删除的镜像条目" || echo "无变更可提交"
            git push origin main

            if [ -f deleted-images.txt ]; then
              while IFS= read -r del_image; do
                sed -i "/|${del_image}$/d" combined-list.txt
              done < deleted-images.txt
            fi
          fi

      - name: 同步所有架构镜像更新
        env:
          GHCR_USER: ${{ github.repository_owner }}
        run: |
          echo "===== 同步镜像列表 ====="
          cat combined-list.txt
          echo "===================="

          while IFS='|' read -r source_image target_image; do
            echo "处理镜像: $target_image (源镜像: $source_image)"
            source_image_full="docker://$source_image:latest"
            target_image_base="ghcr.io/$(echo "$GHCR_USER" | tr 'A-Z' 'a-z')/$target_image"
            need_update=false

            source_manifest=$(skopeo inspect --raw "$source_image_full")
            source_digest=$(echo "$source_manifest" | jq -r '.digest // empty')

            if target_manifest=$(skopeo inspect --raw "docker://$target_image_base:latest" 2>/dev/null); then
              target_digest=$(echo "$target_manifest" | jq -r '.digest // empty')
            else
              target_digest=""
            fi

            if [ "$source_digest" != "$target_digest" ]; then
              echo "检测到清单更新，开始全架构同步..."
              need_update=true
            else
              echo "清单未更新，跳过同步"
              continue
            fi

            if echo "$source_manifest" | jq -e '.manifests' > /dev/null 2>&1; then
              ARCHS=$(echo "$source_manifest" | jq -r '.manifests[].platform.architecture' | sort -u | grep -E 'amd64|arm64|armv7|arm|386|ppc64le|s390x|mips64le')
            else
              ARCH=$(echo "$source_manifest" | jq -r '.architecture')
              ARCHS=$( [[ "$ARCH" =~ ^(amd64|arm64|armv7|arm|386|ppc64le|s390x|mips64le)$ ]] && echo "$ARCH" || echo "")
            fi

            if [ -z "$ARCHS" ]; then
              echo "❌ 未找到支持的架构，使用默认架构 amd64"
              ARCHS="amd64"
            fi

            for arch in $ARCHS; do
              echo "▸ 处理架构: $arch"
              target_tag="$target_image_base:latest-$arch"

              arch_digest=$(echo "$source_manifest" | jq -r \
                --arg arch "$arch" \
                '.manifests[] | select(.platform.architecture == $arch or (.platform.architecture == "armv7" and $arch == "arm")).digest')

              if [ -z "$arch_digest" ]; then
                arch_digest=$(echo "$source_manifest" | jq -r \
                  --arg arch "$arch" \
                  '.manifests[] | select(.platform.variant? == "v7" and $arch == "arm").digest')
              fi

              if [ -z "$arch_digest" ]; then
                echo "⚠️ 警告：架构 $arch 不存在于源镜像中，已跳过"
                continue
              fi

              docker pull --platform "linux/$arch" "$(echo "$source_image_full" | sed 's|docker://||')@$arch_digest"
              docker tag "$(echo "$source_image_full" | sed 's|docker://||')@$arch_digest" "$target_tag"
              docker push "$target_tag"
            done

            echo "🔄 重建多架构manifest列表..."
            docker manifest rm "$target_image_base:latest" 2>/dev/null || true
            amend_args=()
            for arch in $ARCHS; do
              amend_args+=(--amend "$target_image_base:latest-$arch")
            done
            docker manifest create "$target_image_base:latest" "${amend_args[@]}" --insecure
            docker manifest push "$target_image_base:latest"

            echo "✅ 同步完成: $target_image_base:latest"
            echo "────────────────────────────────────────"
          done < combined-list.txt

      - name: 删除 ghcr.io 上 README 未列出的镜像包
        env:
          GHCR_USER: ${{ github.repository_owner }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "===== 检查 ghcr.io 上所有包 ====="
          # 获取 README 中应保留的镜像名
          cat target-image-list.txt | sort > keep-list.txt

          # 根据 GHCR_USER 是个人用户还是组织来确定 API 路径
          # 假设 GHCR_USER (${{ github.repository_owner }}) 是个人用户
          API_PATH_PREFIX="users/${GHCR_USER}"
          # 如果是组织，请使用: API_PATH_PREFIX="orgs/${GHCR_USER}"

          echo "正在从 ${API_PATH_PREFIX}/packages 获取包列表..."
          if ! gh api \
            -H "Accept: application/vnd.github+json" \
            "${API_PATH_PREFIX}/packages?package_type=container&per_page=100" \
            > ghcr_packages.json; then
            echo "获取包列表失败，请检查权限或重试"
            exit 1
          fi

          # 检查是否成功获取到数据
          if [ ! -s ghcr_packages.json ] || ! jq empty ghcr_packages.json 2>/dev/null; then
            echo "获取到的包数据无效或为空"
            cat ghcr_packages.json
            exit 1
          fi

          jq -r '.[].name' ghcr_packages.json | sort > ghcr-list.txt

          echo "在 ghcr.io 上找到的包："
          cat ghcr-list.txt
          echo "应该保留的包："
          cat keep-list.txt

          # 找出需要删除的包（ghcr.io 上有但 README 没有的）
          comm -23 ghcr-list.txt keep-list.txt > to-delete.txt

          if [ -s to-delete.txt ]; then
            echo "需要删除的包："
            cat to-delete.txt
            while IFS= read -r pkg; do
              echo "正在删除 ghcr.io 上的包: $pkg (路径: ${API_PATH_PREFIX}/packages/container/${pkg})"
              if ! gh api \
                -X DELETE \
                -H "Accept: application/vnd.github+json" \
                "${API_PATH_PREFIX}/packages/container/${pkg}" \
                --silent; then
                echo "删除 $pkg 失败，可能无权限或包不存在"
              fi
            done < to-delete.txt
          else
            echo "无需要删除的包"
          fi
