# .github/workflows/docker-build.yml

name: 构建 Docker 镜像 → ghcr.io, DockerHub

on:
  workflow_dispatch:
    inputs:
      repo_url:
        description: "要构建的 Git 仓库克隆链接 (例如: https://github.com/your-name/your-repo.git)"
        required: true
      repo_ref:
        description: "要检出的分支、标签或提交SHA (例如: main)"
        required: true
        default: "main"
      image_name:
        description: "要设置的镜像名称 (例如: my-awesome-app)"
        required: true
        default: "my-app"
      tags:
        description: "要推送的标签, 逗号分隔 (例如: latest,v1.0)"
        required: true
        default: "latest"
      platforms:
        description: "要构建的平台, 逗号分隔"
        required: true
        default: "linux/amd64,linux/arm64,linux/arm/v7"

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: 1. 检出本项目仓库
        uses: actions/checkout@v4
        with:
          # 使用 GITHUB_TOKEN 以便后续可以推送更改
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 2. 克隆指定的代码仓库
        run: |
          git clone ${{ github.event.inputs.repo_url }} app
          cd app
          git checkout ${{ github.event.inputs.repo_ref }}

      - name: 3. 设置 QEMU
        uses: docker/setup-qemu-action@v3

      - name: 4. 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 5. 登录到 GitHub Container Registry (ghcr.io)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 6. 登录到 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: 7. 提取 Docker 元数据并生成标签
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.inputs.image_name }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.inputs.image_name }}
          tags: ${{ github.event.inputs.tags }}

      - name: 8. 构建并推送到多个镜像仓库
        uses: docker/build-push-action@v6
        with:
          context: ./app
          platforms: ${{ github.event.inputs.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: 9. 更新 README.md 中的“已构建的 Docker 镜像”表格
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git pull --rebase

          # 准备表格新条目所需的信息
          GHCR_IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/${{ github.event.inputs.image_name }}"
          DOCKERHUB_IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.inputs.image_name }}"
          SOURCE_REPO_PATH=$(echo "${{ github.event.inputs.repo_url }}" | sed -E 's|https?://github.com/||' | sed 's/\.git$//')
          SOURCE_REPO_URL="[${SOURCE_REPO_PATH}](${{ github.event.inputs.repo_url }})"

          # 检查镜像是否已存在于表格中 (基于ghcr.io的镜像名)
          # 我们现在检查整个文件，因为表格可能不存在
          if grep -qF "$GHCR_IMAGE_NAME" README.md; then
            echo "镜像 $GHCR_IMAGE_NAME 的记录已存在于 README.md，跳过更新。"
            exit 0
          fi

          echo "添加新构建的镜像记录到 README.md"

          # 提取现有表格内容中的数据行
          data_lines=$(awk '/^### 已构建的 Docker 镜像/,!/^\|/ && !/^$/ {if ($0 ~ /^\| [0-9]/) print}' README.md)

          # --- 修复缺陷 1: 序号错误 ---
          # 只有在 data_lines 非空时才计算行数，否则为0
          if [ -z "$data_lines" ]; then
            count=0
          else
            count=$(echo "$data_lines" | wc -l)
          fi
          new_count=$((count + 1))

          # --- 修复缺陷 2: 空格错误 ---
          # 将所有 %-XXs 修改为 %s，移除不必要的空格填充
          printf -v new_row "| %-3s | %s | \`%s\` | \`%s\` | \`%s\` |" \
            "$new_count" \
            "$SOURCE_REPO_URL" \
            "$GHCR_IMAGE_NAME" \
            "$DOCKERHUB_IMAGE_NAME" \
            "${{ github.event.inputs.platforms }}"

          # 创建包含新表格内容的临时文件
          {
            echo "### 已构建的 Docker 镜像"
            echo ""
            echo "|   | 源仓库 | pull 镜像 (ghcr.io) | pull 镜像 (Docker Hub) | 构建平台 |"
            echo "|---|---|---|---|---|"
            if [ -n "$data_lines" ]; then
              echo "$data_lines"
            fi
            echo "$new_row"
          } > new_build_table_content.txt

          # --- 修复缺陷 3: 重复错误 ---
          # 使用一个简单而健壮的 awk 脚本来执行替换，而不是插入
          awk '
            # 默认情况下，我们在“非跳过”模式
            BEGIN { skipping=0 }
            # 当我们找到标题时...
            /^### 已构建的 Docker 镜像/ {
              # ...打印我们准备好的新表格...
              while ((getline line < "new_build_table_content.txt") > 0) { print line }
              close("new_build_table_content.txt");
              # ...然后立即进入“跳过”模式
              skipping=1;
              next
            }
            # 如果我们正处于“跳过”模式...
            skipping==1 {
              # ...并且遇到一个非表格行（不是|开头，也不是空行）...
              if (!/^\|/ && !/^$/) {
                # ...那么就停止跳过，并打印这一行
                skipping=0;
                print;
              }
              # 如果还是表格行，就什么也不做（即跳过）
              next;
            }
            # 如果不在“跳过”模式，就正常打印
            { print }
          ' README.md > README.tmp && mv README.tmp README.md

          # 提交并推送更改
          git add README.md
          if git diff --staged --quiet; then
            echo "README.md 没有变化，无需提交。"
          else
            git commit -m "docs: 新增构建镜像 ${{ github.event.inputs.image_name }} 的记录"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
