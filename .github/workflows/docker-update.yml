name: 更新 Docker 镜像 → 定时更新 ghcr.io

on:
  schedule:
    - cron: "0 16 * * *"
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 安装依赖
        run: sudo apt-get install -y jq skopeo

      # 步骤保持不变
      - name: 提取目标镜像名称（从 pull 命令列）
        id: extract-target-images
        run: |
          # ... (此部分代码不变) ...
          awk -F '|' '
          /^### 已同步的 Docker 镜像/ {capture=1; next}
          capture && /^\| [0-9]+/ {
              sync_col=$6; gsub(/^[ \t]+|[ \t]+$/, "", sync_col);
              if (sync_col != "✔️") next;
              gsub(/^[ \t]+|[ \t]+$/, "", $4);
              gsub(/`/, "", $4);
              print $4
          }
          /^### 部分镜像 docker run 命令/ {capture=0}
          ' README.md | grep -vE '^源镜像$|^-+$' | sed '/^$/d' | \
          sed 's|^ghcr.io/sqing33/||' | \
          sed 's/:[^:]*$//' > target-image-list.txt
          echo "===== target-image-list.txt 内容 ====="
          cat target-image-list.txt

      # 步骤保持不变
      - name: 提取源镜像名称（从源镜像列）
        id: extract-source-images
        run: |
          # ... (此部分代码不变) ...
          awk -F '|' '
          /^### 已同步的 Docker 镜像/ {capture=1; next}
          capture && /^\| [0-9]+/ {
              sync_col=$6; gsub(/^[ \t]+|[ \t]+$/, "", sync_col);
              if (sync_col != "✔️") next;
              gsub(/^[ \t]+|[ \t]+$/, "", $3);
              gsub(/`/, "", $3);
              print $3
          }
          /^### 部分镜像 docker run 命令/ {capture=0}
          ' README.md | grep -vE '^源镜像$|^-+$' | sed '/^$/d' > source-image-list.txt
          echo "===== source-image-list.txt 内容 ====="
          cat source-image-list.txt

      # 步骤保持不变
      - name: 合并镜像列表
        run: |
          # ... (此部分代码不变) ...
          if [ ! -s source-image-list.txt ] || [ ! -s target-image-list.txt ]; then
            echo "错误：source-image-list.txt 或 target-image-list.txt 为空或不存在"
            exit 1
          fi
          paste -d '|' source-image-list.txt target-image-list.txt > combined-list.txt
          echo "===== combined-list.txt 内容 ====="
          cat combined-list.txt

      # 清理步骤保持不变
      - name: 清理已删除的镜像条目
        # ... (此部分代码不变) ...
        env:
          GHCR_USER: ${{ github.repository_owner }}
        run: |
          # ...

      # --- 新增：登录到 Docker Hub ---
      - name: 登录到 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} # 需要在仓库Secrets中设置DOCKERHUB_USERNAME
          password: ${{ secrets.DOCKERHUB_TOKEN }}    # 需要在仓库Secrets中设置DOCKERHUB_TOKEN

      - name: 登录到 GitHub 容器注册表
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 同步所有架构镜像更新
        env:
          GHCR_USER: ${{ github.repository_owner }}
        run: |
          # --- 新增：使脚本更健壮 ---
          set -eo pipefail

          echo "===== 同步镜像列表 ====="
          cat combined-list.txt
          echo "===================="
          
          while IFS='|' read -r source_image target_image; do
            echo "────────────────────────────────────────"
            echo "处理镜像: $target_image (源镜像: $source_image)"
            
            # 判断源镜像是否已带 tag
            if [[ "$source_image" == *:* ]]; then
              source_image_full="docker://$source_image"
            else
              source_image_full="docker://$source_image:latest"
            fi
            target_image_base="ghcr.io/$(echo "$GHCR_USER" | tr 'A-Z' 'a-z')/$target_image"
            
            # --- 修改：增加详细日志 ---
            echo "正在检查源镜像: $source_image_full"
            source_manifest=$(skopeo inspect --raw "$source_image_full")
            source_digest=$(echo "$source_manifest" | jq -r '.digest // empty')
            echo "源镜像 Digest: $source_digest"

            echo "正在检查目标镜像: docker://$target_image_base:latest"
            if target_manifest=$(skopeo inspect --raw "docker://$target_image_base:latest" 2>/dev/null); then
              target_digest=$(echo "$target_manifest" | jq -r '.digest // empty')
            else
              target_digest=""
            fi
            echo "目标镜像 Digest: $target_digest"

            if [ -z "$source_digest" ]; then
              echo "❌ 错误：无法获取源镜像的 digest，跳过。"
              continue
            fi

            if [ "$source_digest" != "$target_digest" ]; then
              echo "✅ 检测到清单更新，开始全架构同步..."
            else
              echo "清单未更新，跳过同步。"
              continue
            fi

            # --- (同步逻辑保持不变) ---
            if echo "$source_manifest" | jq -e '.manifests' > /dev/null 2>&1; then
              ARCHS=$(echo "$source_manifest" | jq -r '.manifests[].platform.architecture' | sort -u | grep -E 'amd64|arm64|armv7|arm|386|ppc64le|s390x|mips64le')
            else
              ARCH=$(echo "$source_manifest" | jq -r '.architecture')
              ARCHS=$( [[ "$ARCH" =~ ^(amd64|arm64|armv7|arm|386|ppc64le|s390x|mips64le)$ ]] && echo "$ARCH" || echo "")
            fi
            
            if [ -z "$ARCHS" ]; then
              echo "⚠️ 未找到有效架构，尝试使用 'amd64' 作为默认值。"
              ARCHS="amd64"
            fi
            
            # ... (docker pull, tag, push, manifest create, push 等逻辑不变) ...
            
            echo "✅ 同步完成: $target_image_base:latest"

            # --- 修正：更新 README.md 的 awk 脚本 ---
            today=$(date +'%Y-%m-%d')
            # 修正了列索引的匹配逻辑，确保正确匹配并更新
            # 假设表格结构为：| 序号 | 源镜像 | Pull 命令 | 用途 | 同步 | 更新时间 |
            # 那么 FS='|' 分割后，$1为空，$2=序号, $3=源镜像, $4=Pull命令, $5=用途, $6=同步, $7=更新时间
            awk -F'|' -v img_name="$target_image" -v date="$today" '
              BEGIN{OFS=FS}
              # 匹配包含 `ghcr.io/.../镜像名` 的行，并且同步列(第6列)为 ✔️
              $4 ~ "`ghcr.io/.*/" img_name "(:[^`]+)?`" && $6 ~ /✔️/ {
                  $7 = " " date " "; # 更新第7列
                  print;
                  next
              }
              {print}
            ' README.md > README.tmp && mv README.tmp README.md
            
            git config --global user.name "github-actions[bot]"
            git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add README.md
            # 提交前检查是否有变更
            if ! git diff --staged --quiet; then
              git commit -m "chore(sync): 更新镜像 [${target_image}] 的同步时间"
              git push
            else
              echo "README.md 无变更，无需提交。"
            fi
            
          done < combined-list.txt
