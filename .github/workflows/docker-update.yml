name: 更新 Docker 镜像 → 定时更新 ghcr.io

on:
  schedule:
    # 每天的 UTC 时间 16:00 (北京时间 00:00) 运行
    - cron: "0 16 * * *"
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    steps:
      - name: 1. 检出仓库
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 2. 安装依赖
        run: sudo apt-get update && sudo apt-get install -y jq skopeo

      - name: 3. 提取目标镜像名称
        id: extract-target-images
        run: |
          owner_lowercase=$(echo "${{ github.repository_owner }}" | tr 'A-Z' 'a-z')
          awk -F '|' '
          /^### 已同步的 Docker 镜像/ {capture=1; next}
          capture && /^\| [0-9]+/ {
              sync_col=$6; gsub(/^[ \t]+|[ \t]+$/, "", sync_col);
              if (sync_col != "✔️") next;
              gsub(/^[ \t]+|[ \t]+$/, "", $4); gsub(/`/, "", $4);
              print $4
          }
          /^### / && capture && !/已同步/ {capture=0}
          ' README.md | grep -vE '^源镜像$|^-+$' | sed '/^$/d' | \
          sed "s|^ghcr.io/$owner_lowercase/||" | \
          sed 's/:[^:]*$//' > target-image-list.txt
          echo "===== 将要检查的目标镜像列表 ====="
          cat target-image-list.txt

      - name: 4. 提取源镜像名称
        id: extract-source-images
        run: |
          awk -F '|' '
          /^### 已同步的 Docker 镜像/ {capture=1; next}
          capture && /^\| [0-9]+/ {
              sync_col=$6; gsub(/^[ \t]+|[ \t]+$/, "", sync_col);
              if (sync_col != "✔️") next;
              gsub(/^[ \t]+|[ \t]+$/, "", $3); gsub(/`/, "", $3);
              print $3
          }
          /^### / && capture && !/已同步/ {capture=0}
          ' README.md | grep -vE '^源镜像$|^-+$' | sed '/^$/d' > source-image-list.txt
          echo "===== 对应的源镜像列表 ====="
          cat source-image-list.txt

      - name: 5. 合并镜像列表
        run: |
          if [ ! -s source-image-list.txt ] || [ ! -s target-image-list.txt ]; then
            echo "错误：源或目标镜像列表为空，请检查 README.md 表格格式。"
            exit 1
          fi
          paste -d '|' source-image-list.txt target-image-list.txt > combined-list.txt
          echo "===== 合并后的镜像检查列表 ====="
          cat combined-list.txt

      - name: 6a. 检查 Docker Hub 凭证是否存在
        id: check_dockerhub_creds
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "present=true" >> "$GITHUB_OUTPUT"
          else
            echo "present=false" >> "$GITHUB_OUTPUT"
          fi

      - name: 6b. 登录到 Docker Hub
        if: steps.check_dockerhub_creds.outputs.present == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 7. 登录到 GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 8. 同步所有架构镜像更新
        env:
          GHCR_USER: ${{ github.repository_owner }}
        run: |
          set -eo pipefail

          get_arch_digests() {
            local manifest_content=$1
            if [ -z "$manifest_content" ]; then
              echo ""
              return
            fi
            # 检查是多架构清单还是单架构镜像
            if echo "$manifest_content" | jq -e '.manifests' > /dev/null 2>&1; then
              # 多架构：提取所有架构的 digest 并排序
              echo "$manifest_content" | jq -r '.manifests[].digest' | sort
            else
              # 单架构：直接使用顶层 digest
              echo "$manifest_content" | jq -r '.digest // empty'
            fi
          }

          echo "===== 开始同步镜像 ====="
          
          while IFS='|' read -r source_image target_image; do
            echo "────────────────────────────────────────"
            echo "处理镜像: $target_image (源镜像: $source_image)"
            
            if [[ "$source_image" == *:* ]]; then
              source_image_full="docker://$source_image"
            else
              source_image_full="docker://$source_image:latest"
            fi
            owner_lowercase=$(echo "$GHCR_USER" | tr 'A-Z' 'a-z')
            target_image_base="ghcr.io/$owner_lowercase/$target_image"
            
            # 获取源和目标的原始清单
            source_manifest=$(skopeo inspect --raw "$source_image_full" 2>/dev/null)
            target_manifest=$(skopeo inspect --raw "docker://$target_image_base:latest" 2>/dev/null || echo "")

            # 使用新函数获取并比较架构摘要列表
            source_digests=$(get_arch_digests "$source_manifest")
            target_digests=$(get_arch_digests "$target_manifest")

            echo "源架构摘要列表:" && (echo "$source_digests" | sed 's/^/  /' || echo "  (空)")
            echo "目标架构摘要列表:" && (echo "$target_digests" | sed 's/^/  /' || echo "  (空)")

            if [ -z "$source_digests" ]; then
              echo "❌ 错误：无法获取源镜像的架构摘要，已跳过。"
              continue
            fi
            if [ "$source_digests" == "$target_digests" ]; then
              echo "✅ 所有架构的摘要均匹配，清单未更新，跳过同步。"
              continue
            fi

            echo "检测到架构摘要不匹配，开始全架构同步..."
            
            if echo "$source_manifest" | jq -e '.manifests' > /dev/null 2>&1; then
              ARCHS=$(echo "$source_manifest" | jq -r '.manifests[].platform.architecture' | sort -u | grep -E 'amd64|arm64|armv7|arm|386|ppc64le|s390x|mips64le')
            else
              ARCH=$(echo "$source_manifest" | jq -r '.architecture')
              ARCHS=$( [[ "$ARCH" =~ ^(amd64|arm64|armv7|arm|386|ppc64le|s390x|mips64le)$ ]] && echo "$ARCH" || echo "")
            fi
            
            if [ -z "$ARCHS" ]; then
              echo "⚠️ 未找到有效架构，将作为单架构镜像处理。"
              ARCHS="default"
            fi

            echo "开始同步架构:" && echo "$ARCHS"
            amend_args=()

            for arch in $ARCHS; do
              source_image_name=$(echo "$source_image_full" | sed 's|docker://||')
              
              if [[ "$arch" == "default" ]]; then
                 arch_digest=$(echo "$source_manifest" | jq -r '.digest // empty')
                 target_tag="$target_image_base:latest-amd64" # 假设默认为amd64
                 amend_args+=(--amend "$target_tag")
              else
                 echo "▸ 处理架构: $arch"
                 target_tag="$target_image_base:latest-$arch"
                 arch_digest=$(echo "$source_manifest" | jq -r --arg arch "$arch" '.manifests[] | select(.platform.architecture == $arch or (.platform.architecture == "arm" and .platform.variant == "v7")).digest' | head -n 1)
                 if [ -z "$arch_digest" ]; then
                    arch_digest=$(echo "$source_manifest" | jq -r --arg arch "$arch" '.manifests[] | select(.platform.architecture == "armv7" and $arch == "arm").digest' | head -n 1)
                 fi
                 amend_args+=(--amend "$target_tag")
              fi

              if [ -z "$arch_digest" ]; then
                 echo "⚠️ 警告：无法定位架构 $arch 的 digest，已跳过"
                 continue
              fi

              echo "拉取: $source_image_name@$arch_digest"
              docker pull "$source_image_name@$arch_digest"
              docker tag "$source_image_name@$arch_digest" "$target_tag"
              docker push "$target_tag"
            done
            
            echo "🔄 重建多架构 manifest 列表..."
            docker manifest rm "$target_image_base:latest" 2>/dev/null || true
            docker manifest create "$target_image_base:latest" "${amend_args[@]}"
            docker manifest push "$target_image_base:latest"
            
            echo "✅ 同步完成: $target_image_base:latest"
            
            today=$(date +'%Y-%m-%d')
            awk -F'|' -v img_name="$target_image" -v date="$today" '
              BEGIN{OFS=FS}
              $4 ~ "`ghcr.io/.*/" img_name "(:[^`]+)?`" && $6 ~ /✔️/ { $7 = " " date " "; print; next }
              {print}
            ' README.md > README.tmp && mv README.tmp README.md
            
            git config --global user.name "github-actions[bot]"
            git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add README.md
            if ! git diff --staged --quiet; then
              git commit -m "chore(sync): 更新镜像 [$target_image] 的同步时间"
              git push
            else
              echo "README.md 无变更，无需提交。"
            fi
          done < combined-list.txt
